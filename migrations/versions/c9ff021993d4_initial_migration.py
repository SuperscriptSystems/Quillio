"""Initial migration

Revision ID: c9ff021993d4
Revises: 
Create Date: 2025-09-21 09:33:01.729289

"""
import uuid
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql
from sqlalchemy.types import TypeDecorator, CHAR, Text
from sqlalchemy.dialects.postgresql import UUID as PostgresUUID

# Define GUID type for SQLAlchemy
class GUID(TypeDecorator):
    """Platform-independent GUID type.
    Uses PostgreSQL's UUID type, otherwise uses
    CHAR(32), storing as stringified hex values.
    """
    impl = CHAR
    cache_ok = True

    def load_dialect_impl(self, dialect):
        if dialect.name == 'postgresql':
            return dialect.type_descriptor(PostgresUUID())
        else:
            return dialect.type_descriptor(CHAR(32))

    def process_bind_param(self, value, dialect):
        if value is None:
            return value
        elif dialect.name == 'postgresql':
            return str(value)
        else:
            if not isinstance(value, uuid.UUID):
                return "%.32x" % uuid.UUID(value).int
            else:
                return "%.32x" % value.int

    def process_result_value(self, value, dialect):
        if value is None:
            return value
        else:
            return uuid.UUID(value)

# revision identifiers, used by Alembic.
revision = 'c9ff021993d4'
down_revision = None
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('courses',
    sa.Column('id', GUID(), nullable=False, default=uuid.uuid4),
    sa.Column('user_id', GUID(), nullable=False),
    sa.Column('course_title', sa.String(length=200), nullable=False),
    sa.Column('course_data', sa.JSON() if op.get_context().dialect.name == 'sqlite' else postgresql.JSONB(astext_type=Text()), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('completed_lessons', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('lessons',
    sa.Column('id', GUID(), nullable=False, default=uuid.uuid4),
    sa.Column('course_id', GUID(), nullable=False),
    sa.Column('unit_title', sa.String(), nullable=False),
    sa.Column('lesson_title', sa.String(), nullable=False),
    sa.Column('html_content', sa.Text(), nullable=True),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('unit_test_results',
    sa.Column('id', GUID(), nullable=False, default=uuid.uuid4),
    sa.Column('user_id', GUID(), nullable=False),
    sa.Column('course_id', GUID(), nullable=False),
    sa.Column('unit_title', sa.String(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['course_id'], ['courses.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'course_id', 'unit_title', name='_user_course_unit_uc')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('unit_test_results')
    op.drop_table('lessons')
    op.drop_table('courses')
    # ### end Alembic commands ###
